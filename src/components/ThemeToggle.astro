---
// 主题切换组件 - 明暗模式切换
---

<button id="theme-toggle" type="button" class="theme-toggle" aria-label="Toggle theme">
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
    <circle cx="10" cy="10" r="3.5" stroke-width="1.5"></circle>
    <path d="M10 2v2m0 12v2M18 10h-2M4 10H2m14.364-5.364l-1.414 1.414M7.05 12.95l-1.414 1.414m9.9 0l-1.414-1.414M7.05 7.05L5.636 5.636" stroke-width="1.5" stroke-linecap="round"></path>
  </svg>
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 20 20" fill="none">
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" fill="currentColor"></path>
  </svg>
</button>

<style>
  .theme-toggle {
    position: fixed;
    top: 1rem;
    right: 1rem;
    z-index: 1000;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .theme-toggle:hover {
    background: rgba(0, 0, 0, 0.5);
    transform: scale(1.05);
  }

  .theme-toggle svg {
    color: white;
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .sun-icon {
    position: absolute;
    opacity: 0;
    transform: rotate(90deg);
  }

  .moon-icon {
    position: absolute;
    opacity: 1;
    transform: rotate(0deg);
  }

  :global(html:not(.dark)) .theme-toggle {
    background: rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(0, 0, 0, 0.1);
  }

  :global(html:not(.dark)) .theme-toggle svg {
    color: #333;
  }

  :global(html:not(.dark)) .sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  :global(html:not(.dark)) .moon-icon {
    opacity: 0;
    transform: rotate(-90deg);
  }

  @media (max-width: 768px) {
    .theme-toggle {
      top: 0.75rem;
      right: 0.75rem;
      width: 2.25rem;
      height: 2.25rem;
    }
  }
</style>

<script>
  const getColorMode = (): 'light' | 'dark' => {
    if (typeof localStorage !== 'undefined') {
      const stored = localStorage.getItem('colorMode');
      if (stored === 'light' || stored === 'dark') {
        return stored as 'light' | 'dark';
      }
    }
    if (window.matchMedia('(prefers-color-scheme: light)').matches) {
      return 'light';
    }
    return 'dark';
  };

  const setColorMode = (mode: 'light' | 'dark') => {
    const html = document.documentElement;
    
    if (mode === 'dark') {
      html.classList.add('dark');
      html.classList.remove('light');
    } else {
      html.classList.remove('dark');
      html.classList.add('light');
    }
    
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('colorMode', mode);
    }
  };

  setColorMode(getColorMode());

  document.getElementById('theme-toggle')?.addEventListener('click', () => {
    const currentMode = getColorMode();
    const newMode = currentMode === 'light' ? 'dark' : 'light';
    setColorMode(newMode);
  });

  window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', (e) => {
    if (typeof localStorage !== 'undefined' && !localStorage.getItem('colorMode')) {
      setColorMode(e.matches ? 'light' : 'dark');
    }
  });
</script>

