---
import { getArticleById } from '../../lib/articles';
import { processMarkdown } from '../../lib/markdown-processor';
import { getArticleTags, getForwardLinks } from '../../lib/links-service';
import { db } from '../../db/client';
import { articles } from '../../db/schema';
import { eq } from 'drizzle-orm';
import QuartzLayout from '../../layouts/QuartzLayout.astro';
import Backlinks from '../../components/Backlinks';
import TableOfContents from '../../components/quartz/TableOfContents';
import PageTitle from '../../components/quartz/PageTitle';
import Breadcrumbs from '../../components/quartz/Breadcrumbs';
import ContentMeta from '../../components/quartz/ContentMeta';
import TagList from '../../components/quartz/TagList';
import Darkmode from '../../components/quartz/Darkmode';
import ReaderMode from '../../components/quartz/ReaderMode';
import Search from '../../components/quartz/Search';
import Explorer from '../../components/quartz/Explorer';
import LocalGraph from '../../components/LocalGraph';

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}

const articleId = parseInt(id);

if (isNaN(articleId)) {
  return Astro.redirect('/404');
}

const article = await getArticleById(articleId);

if (!article) {
  return Astro.redirect('/404');
}

// 并行查询标签和前向链接
const [tags, forwardLinks] = await Promise.all([
  getArticleTags(articleId),
  getForwardLinks(articleId),
]);

// 使用缓存的 HTML 或实时处理 Markdown
let processed: { html: string; readingTime: string; };

if (article.htmlContent && article.readingTime) {
  // 使用缓存的 HTML（极快！）
  processed = {
    html: article.htmlContent,
    readingTime: article.readingTime,
  };
} else {
  // 缓存未命中，需要处理 Markdown（首次访问或内容更新后）
  const allArticleSlugs = await db
    .select({ slug: articles.slug })
    .from(articles)
    .where(eq(articles.status, 'published'))
    .then(results => new Set(results.map(r => r.slug)));

  processed = await processMarkdown(
    article.content,
    {}, // options
    async (permalink: string) => {
      return allArticleSlugs.has(permalink);
    }
  );

  // 更新缓存（异步，不阻塞页面渲染）
  db.update(articles)
    .set({
      htmlContent: processed.html,
      readingTime: processed.readingTime,
    })
    .where(eq(articles.id, articleId))
    .then(() => console.log(`Cached HTML for article ${articleId}`))
    .catch(err => console.error('Failed to cache HTML:', err));
}

const formattedDate = new Date(article.publishedAt || article.createdAt).toLocaleDateString('zh-CN', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<QuartzLayout title={article.title} currentSlug={`articles/${id}`}>
  <!-- Left Sidebar -->
  <div slot="left-sidebar">
    <!-- PageTitle 组件 -->
    <PageTitle title="I want to learn" client:load />
    
    <!-- Search, Darkmode & ReaderMode 同一行 -->
    <div class="search-controls-row">
      <Search client:only="react" enablePreview={true} />
      <div class="control-icons">
        <Darkmode client:only="react" />
        <ReaderMode client:only="react" />
      </div>
    </div>
    
    <!-- Explorer 文件浏览器 -->
    <Explorer client:only="react" title="文章浏览" folderDefaultState="open" />
  </div>

  <!-- Right Sidebar -->
  <div slot="right-sidebar">
    <!-- 局部知识图谱 -->
    <LocalGraph articleId={articleId} client:load />
    
    <!-- 目录 -->
    <TableOfContents client:load />
  </div>

  <!-- Before Body (Breadcrumbs, Meta, Tags) -->
  <div slot="before-body">
    <Breadcrumbs 
      items={[
        { label: '首页', path: '/' },
        { label: '文章', path: '/articles' },
        { label: article.title, path: `/articles/${id}` }
      ]}
      client:load
    />
    
    <ContentMeta 
      publishedAt={new Date(article.publishedAt || article.createdAt)}
      readingTime={processed.readingTime}
      author={article.authorId.toString()}
      client:load
    />
    
    {tags.length > 0 && (
      <TagList tags={tags} client:load />
    )}
  </div>

  <!-- Main Content -->
  <article>
    {/* Popover 预览提示内容 */}
    <div class="popover-hint">
      <header class="mb-8">
        <h1 class="text-4xl font-extrabold mb-4 leading-tight" style="color: var(--dark);">
          {article.title}
        </h1>

        {/* 摘要 */}
        {article.excerpt && (
          <p class="text-xl mb-4 leading-relaxed" style="color: var(--gray);">
            {article.excerpt}
          </p>
        )}

        {/* 前向链接提示 */}
        {forwardLinks.length > 0 && (
          <div class="text-sm mb-4" style="color: var(--gray);">
            链接到 {forwardLinks.length} 篇文章
          </div>
        )}
      </header>
      
      {/* Markdown 渲染内容 */}
      <div 
        class="prose prose-indigo prose-lg max-w-none"
        style="color: var(--dark);"
        set:html={processed.html}
      />
    </div>

    {/* 前向链接（文章链接到的其他文章） */}
    {forwardLinks.length > 0 && (
      <div class="mt-12 p-6 rounded-lg" style="border: 1px solid var(--lightgray); background-color: var(--highlight);">
        <h3 class="text-lg font-semibold mb-4" style="color: var(--dark);">
          🔗 相关链接 ({forwardLinks.length})
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
          {forwardLinks.map((link) => (
            <a
              href={`/articles/${link.id}`}
              class="block p-3 rounded-md transition-colors"
              style="background-color: var(--light); border: 1px solid transparent;"
            >
              <h4 class="font-medium" style="color: var(--secondary);">
                {link.title}
              </h4>
              {link.excerpt && (
                <p class="text-sm mt-1 line-clamp-2" style="color: var(--gray);">
                  {link.excerpt}
                </p>
              )}
            </a>
          ))}
        </div>
      </div>
    )}

    {/* 反向链接组件 */}
    <Backlinks articleId={articleId} client:load />
  </article>
</QuartzLayout>

<style>
  /* 增强 prose 样式以支持双向链接 */
  .prose a {
    color: var(--secondary);
    text-decoration: underline;
    text-decoration-color: var(--secondary);
    text-decoration-thickness: 2px;
    text-underline-offset: 2px;
  }
  
  .prose a:hover {
    opacity: 0.8;
  }
  
  /* 内部链接标记（用于 Popover） */
  .prose a[href^="/articles/"],
  .prose a[href^="/tags/"] {
    /* 为内部链接添加 internal 类通过 JS 处理 */
  }
  
  .prose code {
    background-color: var(--highlight);
    color: var(--dark);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }

  .prose pre {
    background-color: var(--darkgray);
    color: var(--lightgray);
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
  }

  .prose pre code {
    background-color: transparent;
    color: inherit;
    padding: 0;
  }
  
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: var(--dark);
  }
  
  .prose p, .prose li {
    color: var(--dark);
  }
  
  /* 搜索和控制图标行布局 */
  .search-controls-row {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .control-icons {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-shrink: 0;
  }
  
  /* 控制图标按钮样式 */
  .control-icons .darkmode,
  .control-icons .readermode {
    border: 1px solid var(--lightgray);
    border-radius: 5px;
    padding: 0.5rem;
    background: var(--light);
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .control-icons .darkmode:hover,
  .control-icons .readermode:hover {
    border-color: var(--secondary);
    background: var(--highlight);
  }
  
  .control-icons .darkmode svg,
  .control-icons .readermode svg {
    display: block;
  }
</style>
